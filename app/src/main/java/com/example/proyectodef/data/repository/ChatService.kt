package com.example.proyectodef.data.repository

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONArray
import org.json.JSONObject

object ChatService {

    private const val API_URL = "https://api.openai.com/v1/chat/completions"
    private const val API_KEY = "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"
    private const val ORG_ID = "org-nLl0BjsxMmcGZ3XaxL5em6af"

    private val client = OkHttpClient.Builder()
        .callTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
        .connectTimeout(20, java.util.concurrent.TimeUnit.SECONDS)
        .readTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
        .writeTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
        .build()

    suspend fun enviarPrompt(
        messages: List<Pair<String, String>>,
        userContext: String
    ): String = withContext(Dispatchers.IO) {
        try {
            println("GUAPA: üîß Preparando mensaje para OpenAI...")

            val mensajesArray = JSONArray()

            // Mensaje system
            val systemMessage = """
    Eres Budget Buddy, un asistente financiero. Ya tienes el contexto completo del usuario (datos, transacciones, metas, etc.). 
    Siempre responde desde la primera interacci√≥n. No pidas m√°s contexto. Si el usuario escribe cualquier mensaje, debes interpretar la intenci√≥n y actuar con precisi√≥n. 
    No uses emojis, ni saludos, ni repitas. S√© √∫til, claro y directo.
""".trimIndent()


            mensajesArray.put(JSONObject().put("role", "system").put("content", systemMessage))

            // ‚úÖ Incluir siempre el contexto si est√° disponible
            if (userContext.isNotBlank()) {
                mensajesArray.put(JSONObject().put("role", "user").put("content", "üìä Contexto financiero del usuario:\n$userContext"))
                println("GUAPA: ‚úÖ Contexto a√±adido al mensaje")
            }

            // Conversaci√≥n previa
            messages.takeLast(6).forEachIndexed { i, (user, bot) ->
                mensajesArray.put(JSONObject().put("role", "user").put("content", user))
                mensajesArray.put(JSONObject().put("role", "assistant").put("content", bot))
                println("GUAPA: üó£Ô∏è Historial [$i] user: $user\nbot: $bot")
            }

            // Crear cuerpo JSON
            val requestJson = JSONObject().apply {
                put("model", "gpt-4o-mini")
                put("messages", mensajesArray)
            }

            val requestBody = requestJson.toString().toRequestBody("application/json".toMediaType())
            val request = Request.Builder()
                .url(API_URL)
                .addHeader("Authorization", "Bearer $API_KEY")
                .addHeader("Content-Type", "application/json")
                .addHeader("OpenAI-Organization", ORG_ID)
                .post(requestBody)
                .build()

            println("GUAPA: üöÄ Enviando solicitud a OpenAI...")
            val response = client.newCall(request).execute()
            val responseBody = response.body?.string().orEmpty()
            println("GUAPA: ‚úÖ Respuesta HTTP ${response.code}\n$responseBody")

            return@withContext JSONObject(responseBody)
                .optJSONArray("choices")
                ?.optJSONObject(0)
                ?.optJSONObject("message")
                ?.optString("content")
                ?.trim()
                ?: "No se encontr√≥ contenido v√°lido en la respuesta."

        } catch (e: Exception) {
            println("GUAPA: ‚ùå Error en enviarPrompt: ${e.message}")
            return@withContext "Ocurri√≥ un error al enviar tu mensaje: ${e.message}"
        }
    }
}
